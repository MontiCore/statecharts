/* (c) https://github.com/MontiCore/monticore */
plugins {
  id "java"
  id "de.monticore.generator-withtr" version "$mc_version" // MontiCore Plugin (with TR support)
}

description = "sc-trans-test"
buildDir = file("$projectDir/target")


def grammarDir = "src/main/grammars"
def grammarOutDir = "$buildDir/generated-sources"
def testGrammarOutDir = "$buildDir/generated-test-sources/mc"


// configure non-standard source sets
sourceSets {
  test {
    java.srcDirs += ["$grammarOutDir", "$testGrammarOutDir"]
  }
  grammars {
    resources {
      srcDirs(grammarDir)
      include "**/*.mc4"
    }
  }
}

configurations { grammar }


dependencies {
  testImplementation group: 'junit', name: 'junit', version: junit_version

  // Depend on the rootProject (the module actually defining statecharts)
  grammar rootProject

  // add the dependency to sub1s trafos to the trafoGrammar config,
  // adding it as a dependency to the trafo publication
  // Note: This dependency will be substituted by its subproject
  grammar(group: project.getGroup(), name: "statecharts-trafo", version: project.getVersion())

  // use the grammar configuration (for trafos) to add transitive dependencies of :sub1
  grammar(project(path: rootProject.path, configuration: 'trafoGrammar'))

  // add the compiled trafo java classes of the subproject to the classpath
  implementation files(rootProject.sourceSets.trafo.output.classesDirs)
}

configurations.configureEach {
  resolutionStrategy.dependencySubstitution {
    // Substitute statecharts-trafo with the actual (live) project,
    // loosing the trafo configuration information (requiring the project(path:...,configuration:...) dependencies above)
    substitute module("${project.getGroup()}:statecharts-trafo") using project(rootProject.path)
  }
}

repositories {
  mavenLocal()
  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url repo
  }
}


task generateStatechartTRRules {}

fileTree(dir: "$projectDir/src/main/models/uml", include: '**/**.mtr').each {
  def g = it
  def taskname = "generateUMLStatechartTRRules${it.getName().substring(0, it.getName().lastIndexOf('.'))}"
  task "$taskname"(type: JavaExec) {
    group = "montitrans"
    classpath += sourceSets.main.runtimeClasspath
    main = 'de.monticore.tr.UMLStatechartsTFGenTool'
    args += ["-i", "$g",
             "-o", "$buildDir/generated-sources"]
  }
  generateStatechartTRRules.dependsOn("$taskname")
}


compileTestJava.dependsOn += generateStatechartTRRules

// Fixes issue with java plugin in projects without resources
compileTestJava.doFirst { mkdir sourceSets.test.output.resourcesDir }

tasks.withType(Test) {
  maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}


java {
  withSourcesJar()
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammars)
  }
}

jar.dependsOn grammarsJar

task buildAll(type: GradleBuild) {
  tasks = ['build']
}
