/* (c) https://github.com/MontiCore/monticore */
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.tasks.JavaExec

plugins {
    id "java"
    id "maven-publish"
    id "de.monticore.generator-withtr" version "$mc_version" // MontiCore Plugin with TR support
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.github.themrmilchmann.ecj" version "0.2.0"
}

description = "Statecharts"
buildDir = file("$projectDir/target")


def testSCOutDir = "$buildDir/generated-test-sources/sc"
def testscgenDir = "$projectDir/src/testscgen"

def withTR = ("true").equals(getProperty('genTR'));

// configure non-standard source sets
sourceSets {
  main { }
  test { }
  // The following is required as we still publish a Feature-variant (with usingSourceSet(grammarsForVariant))
  grammarsForVariant {
    java.srcDirs = []
    resources {
      // DO not include the grammars out dir here (with the TR grammars)
      srcDirs(["src/main/grammars"])
      include "**/*.mc4"
      include "**/*.mlc"
    }
    grammars.srcDirs = []
  }

  testscgen {
    java.srcDirs += ["$testSCOutDir"]

    java {}
  }
}

configurations {
  testscgenImplementation.extendsFrom(implementation)
  testscgenImplementation.extendsFrom(testImplementation)
  trafoGrammar // this configuration is actually further set up by the generator-withtr plugin
}

dependencies {
  // Depend on the monticore component grammars
  grammar("de.monticore:monticore-grammar:$mc_version")
  // and their respective trafo-components (as a grammar dependency of the trafo source set)
  trafoGrammar grammar("de.monticore:monticore-grammar-trafo:$mc_version")

  // normal, implementation dependencies
  implementation "de.monticore:class2mc:$mc_version"
  implementation group: 'de.monticore.lang', name: 'cd4analysis', version: mc_version
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
  implementation 'org.apache.groovy:groovy:4.0.2'
  testImplementation "junit:junit:$junit_version"

  testscgenImplementation(sourceSets.main.output.classesDirs)
  testscgenImplementation(sourceSets.test.output.classesDirs)
}

repositories {
    if (("true").equals(getProperty('useLocalRepo'))) {
        mavenLocal()
    }
    maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        url repo
    }
}


// A Task using the UMLStatechartsTool
task generateSC(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath

  mainClass = "de.monticore.umlstatecharts/UMLStatechartsTool"

  args("-i", "${testscgenDir}/resources/examples/DoorExample.sc",
          "-gen", "${testSCOutDir}",
          "-hcp", "${testscgenDir}/java")
}

generateSC.dependsOn compileJava
compileTestscgenJava.dependsOn generateSC
check.dependsOn testscgenClasses

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.fork = true
    options.encoding = "UTF-8"
    options.deprecation false
    options.warnings = false
    options.headerOutputDirectory.convention(null)
}

// all in one tool-jar
shadowJar {
    manifest {
        attributes "Main-Class": "de.monticore.umlstatecharts.UML${archiveBaseName.get().capitalize()}Tool"
    }
    archiveClassifier = "mc-tool"
    archiveFileName = "MC${archiveBaseName.get().capitalize()}.${archiveExtension.get()}"
}

if (withTR) {
  // all in one (umlp) tf-tool-jar
  task uMLSCTransGenerator(type: ShadowJar) {
    onlyIf { withTR }
    dependsOn shadowJar
    group = "shadow"
    manifest.attributes 'Main-Class': 'de.monticore.tr.UMLStatechartsTFGenTool'
    archiveFileName = 'UMLSCTransGenerator.jar'
    archiveClassifier.set('umltfgen')
    from zipTree(shadowJar.archiveFile)
    from zipTree(trafoJar.archiveFile)
    configurations += [project.configurations.trafoRuntimeClasspath]
  }

  // all in one (triggered) tf-tool-jar
  task triggeredSCTransGenerator(type: ShadowJar) {
    onlyIf { withTR }
    dependsOn shadowJar
    group = "shadow"
    manifest.attributes 'Main-Class': 'de.monticore.tr.TriggeredStatechartsTFGenTool'
    archiveFileName = 'TriggeredSCTransGenerator.jar'
    archiveClassifier.set('triggeredtfgen')
    from zipTree(shadowJar.archiveFile)
    from zipTree(trafoJar.archiveFile)
    configurations += [project.configurations.trafoRuntimeClasspath]
  }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the 'test' task
    reportOn tasks.withType(Test)
}

/**
 * Integration with MLC language and tool
 */
task checkArtifacts { group = 'mlc' }
configurations { MLC }
dependencies { MLC(group: 'de.monticore.lang', name: 'mlc-tool', version: mlc_version) }
StringJoiner joiner = new StringJoiner(" ")
configurations.compileClasspath.resolve().each { joiner.add(it.toString()) }
configurations.grammarSymbolDependencies.resolve().each { joiner.add(it.toString()) }
joiner.add "$projectDir/target/symbols"
String mp = joiner.toString()

// two tasks per MLC file
fileTree("src").matching { include '**/*.mlc' }.each {
    def f = it
    def mlcName = it.getName().substring(0, it.getName().lastIndexOf('.'))

    task "showArtifacts${mlcName}"(type: JavaExec) {
        classpath = configurations.MLC
        group = 'mlc'
        mainClass = 'de.monticore.mlc.MLCTool'
        args "-input", f, "-projectDir", projectDir, "-mp", mp, "-s", "-all"
        dependsOn("generateGrammar${mlcName}")
    }

    task "checkArtifacts${mlcName}"(type: JavaExec) {
        classpath = configurations.MLC
        group = 'MLC'
        mainClass = 'de.monticore.mlc.MLCTool'
        args "-input", f, "-projectDir", projectDir, "-mp", mp, "-s", "-check"
        dependsOn("generateGrammar${mlcName}")
        checkArtifacts.dependsOn("checkArtifacts${mlcName}")
    }
}    // end integration with MLC


java {
  withSourcesJar()
  // Deprecated feature, published for compatibility reasons
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammarsForVariant)
  }
}

sourcesJar.dependsOn project.collect { it.tasks.withType(MCTask) }

jar.dependsOn grammarsJar, shadowJar

if (withTR) {
  build.dependsOn triggeredSCTransGenerator, uMLSCTransGenerator
}

// configure deployment
publishing {
    // configure what artifacts to publish
    publications {
      mavenJava(MavenPublication) {
        from components.java
      }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}

task buildAll(type: GradleBuild) {
    tasks = ['build']
}

defaultTasks('build')
